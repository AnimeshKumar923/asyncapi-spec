{
  "asyncapi": "3.0.0",
  "info": {
    "title": "AsyncAPI",
    "version": "1.x.x",
    "description": "This is a very good base doc, probably.",
    "termsOfService": "https://asyncapi.org/terms/",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "externalDocs": {
      "description": "Find more info here",
      "url": "https://www.asyncapi.org"
    },
    "tags": [
      {
        "name": "e-commerce"
      }
    ]
  },
  "servers": {
    "production": {
      "host": "rabbitmq.in.mycompany.com:5672",
      "pathname": "/v1",
      "protocol": "amqp",
      "protocolVersion": "1.0",
      "description": "Production RabbitMQ broker (uses the `production` vhost).",
      "title": "Production Server",
      "summary": "Production environment server",
      "security": [
        {
          "type": "http",
          "scheme": "bearer"
        }
      ],
      "tags": [
        {
          "name": "production",
          "description": "Production environment"
        }
      ],
      "externalDocs": {
        "description": "Additional documentation for the production server",
        "url": "https://example.com/docs/production"
      },
      "bindings": {
        "amqp": {
          "exchange": "my-exchange",
          "queue": "my-queue"
        }
      }
    },
    "staging": {
      "host": "rabbitmq.in.mycompany.com:5672",
      "pathname": "/v1",
      "protocol": "amqp",
      "protocolVersion": "1.0",
      "description": "Staging RabbitMQ broker (uses the `staging` vhost).",
      "title": "Staging Server",
      "summary": "Staging environment server",
      "security": [
        {
          "type": "apiKey",
          "in": "user",
          "description": "Provide your API key as the user and leave the password empty."
        }
      ],
      "tags": [
        {
          "name": "staging",
          "description": "Staging environment"
        }
      ],
      "externalDocs": {
        "description": "Additional documentation for the staging server",
        "url": "https://example.com/docs/staging"
      },
      "bindings": {
        "amqp": {
          "exchange": "my-exchange",
          "queue": "my-queue"
        }
      }
    },
    "rabbitmqInProd": {
      "host": "{prod}.in.mycompany.com",
      "protocol": "amqp",
      "description": "Production server"
    },
    "rabbitmqInStaging": {
      "host": "{stage}.in.mycompany.com",
      "protocol": "amqp",
      "description": "Staging server"
    }
  },
  "channels": {
    "user": {
      "address": "users.{userId}",
      "title": "Users channel",
      "description": "This channel is used to exchange messages about user events.",
      "messages": {
        "userSignedUp": {
          "$ref": "#/components/messages/userSignedUp"
        },
        "userCompletedOrder": {
          "$ref": "#/components/messages/userCompletedOrder"
        }
      },
      "parameters": {
        "userId": {
          "$ref": "#/components/parameters/userId"
        }
      },
      "servers": [
        {
          "$ref": "#/servers/production"
        }
      ],
      "bindings": {
        "amqp": {
          "is": "queue",
          "queue": {
            "exclusive": true
          }
        }
      },
      "tags": [
        {
          "name": "user",
          "description": "User-related messages"
        }
      ],
      "externalDocs": {
        "description": "Find more info here",
        "url": "https://example.com"
      }
    },
    "userSignup": {
      "address": "users.signup",
      "description": "Channel for user signups",
      "messages": {
        "userSignedUp": {
          "$ref": "#/components/messages/userSignedUp"
        }
      }
    },
    "userSignupReply": {
      "address": "users.signup.reply",
      "description": "Channel for user signup replies",
      "messages": {
        "userSignedUpReply": {
          "summary": "User signup reply message",
          "payload": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the signup process"
              },
              "message": {
                "type": "string",
                "description": "Additional information"
              }
            }
          }
        }
      }
    }
  },
  "operations": {
    "sendUserSignUp": {
      "action": "send",
      "title": "User sign up",
      "summary": "Action to sign a user up.",
      "description": "A longer description",
      "channel": {
        "$ref": "#/channels/user"
      },
      "security": [
        {
          "type": "oauth2",
          "description": "The oauth security descriptions",
          "flows": {
            "clientCredentials": {
              "tokenUrl": "https://example.com/api/oauth/dialog",
              "availableScopes": {
                "subscribe:auth_revocations": "Scope required for authorization revocation topic"
              }
            }
          },
          "scopes": [
            "subscribe:auth_revocations"
          ]
        }
      ],
      "tags": [
        {
          "name": "user"
        },
        {
          "name": "signup"
        },
        {
          "name": "register"
        }
      ],
      "bindings": {
        "amqp": {
          "ack": false
        }
      },
      "messages": [
        {
          "$ref": "#/channels/user/messages/userSignedUp"
        }
      ],
      "reply": {
        "address": {
          "location": "$message.header#/replyTo"
        },
        "channel": {
          "$ref": "#/channels/userSignupReply"
        },
        "messages": [
          {
            "$ref": "#/channels/userSignupReply/messages/userSignedUpReply"
          }
        ]
      },
      "traits": []
    }
  },
  "components": {
    "components": {
      "schemas": {
        "Category": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "Tag": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "AvroExample": {
          "schemaFormat": "application/vnd.apache.avro+json;version=1.9.0",
          "schema": {
            "$ref": "path/to/user-create.avsc/#UserCreate"
          }
        }
      },
      "servers": {
        "development": {
          "host": "{stage}.in.mycompany.com:{port}",
          "description": "RabbitMQ broker",
          "protocol": "amqp",
          "protocolVersion": "0-9-1",
          "variables": {
            "stage": {
              "$ref": "#/components/serverVariables/stage"
            },
            "port": {
              "$ref": "#/components/serverVariables/port"
            }
          }
        }
      },
      "serverVariables": {
        "stage": {
          "default": "demo",
          "description": "This value is assigned by the service provider, in this example `mycompany.com`"
        },
        "port": {
          "enum": [
            "5671",
            "5672"
          ],
          "default": "5672"
        }
      },
      "channels": {
        "user/signedup": {
          "subscribe": {
            "message": {
              "$ref": "#/components/messages/userSignUp"
            }
          }
        }
      },
      "messages": {
        "userSignUp": {
          "summary": "Action to sign a user up.",
          "description": "Multiline description of what this action does.\nHere you have another line.\n",
          "tags": [
            {
              "name": "user"
            },
            {
              "name": "signup"
            }
          ],
          "headers": {
            "type": "object",
            "properties": {
              "applicationInstanceId": {
                "description": "Unique identifier for a given instance of the publishing application",
                "type": "string"
              }
            }
          },
          "payload": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/userCreate"
              },
              "signup": {
                "$ref": "#/components/schemas/signup"
              }
            }
          }
        }
      },
      "parameters": {
        "userId": {
          "description": "Id of the user."
        }
      },
      "correlationIds": {
        "default": {
          "description": "Default Correlation ID",
          "location": "$message.header#/correlationId"
        }
      },
      "messageTraits": {
        "commonHeaders": {
          "headers": {
            "type": "object",
            "properties": {
              "my-app-header": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              }
            }
          }
        }
      }
    }
  }
}